<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <mvc:view-controller path="/" view-name="forward:/index.htm" />
    <mvc:resources location="/static/" mapping="/static/**" />
    <mvc:resources location="/html/" mapping="/html/**" />

    <!-- 定义受环境影响易变的变量 -->
    <context:property-placeholder ignore-unresolvable="true" local-override="true" location="classpath*:spring-mvc.properties" />

    <!--对controller包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
    <context:component-scan base-package="com.flyhaze.**.controller">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
    <mvc:annotation-driven  />
    <!-- 请求拦截器配置 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
                <property name="paramName" value="locale" />
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
        <property name="defaultLocale" value="zh_CN" />
    </bean>
    <mvc:default-servlet-handler />
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
                <property name="objectMapper">
                    <bean class="com.flyhaze.jackson.CustomOM" />
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
        <property name="favorPathExtension" value="false" />
        <!-- 用于开启 /userinfo/123?format=json 的支持 -->
        <property name="favorParameter" value="false" />
        <!-- 是否忽略Accept Header -->
        <property name="ignoreAcceptHeader" value="false" />
        <property name="mediaTypes"> <!--扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用 -->
            <value>
                json=application/json
                xml=application/xml
                atom=application/atom+xml
                html=text/html
                *=*/*
            </value>
        </property>
        <!-- 默认的content type -->
        <property name="defaultContentType" value="application/json" />
    </bean>

    <!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8" />
        <property name="maxUploadSize" value="10485760000" />
        <property name="maxInMemorySize" value="40960" />
    </bean>

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
    <bean id="jspResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="order" value="1" />
        <property name="cache" value="false" />
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
        <property name="contentType" value="text/html;charset=UTF-8" />
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
    </bean>

    <!-- google kaptcha的相关配置 -->
    <bean id="kaptchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <!-- kaptcha.border 是否有边框 默认为true 我们可以自己设置yes，no -->
                        <!-- kaptcha.border.color 边框颜色 默认为Color.BLACK -->
                        <!-- kaptcha.border.thickness 边框粗细度 默认为1 -->
                        <!-- kaptcha.producer.impl 验证码生成器 默认为DefaultKaptcha -->
                        <!-- kaptcha.textproducer.impl 验证码文本生成器 默认为DefaultTextCreator -->
                        <!-- kaptcha.textproducer.char.string 验证码文本字符内容范围 默认为abcde2345678gfynmnpwx -->
                        <!-- kaptcha.textproducer.char.length 验证码文本字符长度 默认为5 -->
                        <!-- kaptcha.textproducer.font.names 验证码文本字体样式 默认为new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize) -->
                        <!-- kaptcha.textproducer.font.size 验证码文本字符大小 默认为40 -->
                        <!-- kaptcha.textproducer.font.color 验证码文本字符颜色 默认为Color.BLACK -->
                        <!-- kaptcha.textproducer.char.space 验证码文本字符间距 默认为2 -->
                        <!-- kaptcha.noise.impl 验证码噪点生成对象 默认为DefaultNoise -->
                        <!-- kaptcha.noise.color 验证码噪点颜色 默认为Color.BLACK -->
                        <!-- kaptcha.obscurificator.impl 验证码样式引擎 默认为WaterRipple -->
                        <!-- kaptcha.word.impl 验证码文本字符渲染 默认为DefaultWordRenderer -->
                        <!-- kaptcha.background.impl 验证码背景生成器 默认为DefaultBackground -->
                        <!-- kaptcha.background.clear.from 验证码背景颜色渐进 默认为Color.LIGHT_GRAY -->
                        <!-- kaptcha.background.clear.to 验证码背景颜色渐进 默认为Color.WHITE -->
                        <!-- kaptcha.image.width 验证码图片宽度 默认为200 -->
                        <!-- kaptcha.image.height 验证码图片高度 默认为50 -->
                        <!-- 是否有边框 可选yes 或者 no -->
                        <prop key="kaptcha.border">yes</prop>
                        <!-- 边框颜色 -->
                        <prop key="kaptcha.border.color">105,179,90</prop>
                        <!-- 验证码文本字符颜色 -->
                        <prop key="kaptcha.textproducer.font.color">blue</prop>
                        <!-- 验证码文本字符大小 -->
                        <prop key="kaptcha.textproducer.font.size">45</prop>
                        <!-- 验证码图片的宽度 默认200 -->
                        <prop key="kaptcha.image.width">125</prop>
                        <!-- 验证码图片的高度 默认50 -->
                        <prop key="kaptcha.image.height">45</prop>
                        <!-- 验证码文本字符长度 默认为5 -->
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <!-- 验证码文本字体样式 默认为new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize) -->
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>
</beans>