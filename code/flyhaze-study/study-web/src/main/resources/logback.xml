<?xml version="1.0" encoding="UTF-8"?>
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- 上下文变量设置,用来定义变量值,其中name的值是变量的名称，value的值时变量定义的值。 -->
    <!-- 通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
    <property name="contextName" value="study-web" />
    <property name="logsDir" value="D:/logs/study-web" />
    <property name="logFileName" value="log" />

    <!-- 数据库连接池配置，这里使用的是dbcp2连接池。 -->
    <!-- jdbc连接驱动 -->
    <property name="dsDriverClassName" value="com.mysql.cj.jdbc.Driver" />
    <!-- jdbc连接url -->
    <property name="dsUrl" value="jdbc:mysql://127.0.0.1:3306/liaowei" />
    <!-- jdbc连接登录账户 -->
    <property name="dsUsername" value="liaowei" />
    <!-- jdbc连接登录密码 -->
    <property name="dsPassword" value="LiaoWei_4466" />
    <!-- jdbc连接参数 -->
    <property name="dsConnectionProperties"
        value="useSSL=false;serverTimezone=Asia/Shanghai;useUnicode=true;characterEncoding=utf-8;zeroDateTimeBehavior=convertToNull" />
    <!-- 初始连接数 -->
    <property name="dsInitialSize" value="10" />
    <!-- 最大活动连接数 -->
    <property name="dsMaxTotal" value="50" />
    <!-- 最小空闲连接 -->
    <property name="dsMinIdle" value="10" />
    <!-- 最大空闲连接 -->
    <property name="dsMaxIdle" value="30" />
    <!-- 从连接池获取一个连接时，最大的等待时间 -->
    <property name="dsMaxWaitMillis" value="2000" />
    <!-- 确认查询SQL -->
    <property name="dsValidationQuery" value="select 1 from dual" />
    <!-- 确认查询SQL的超时时间 -->
    <property name="dsValidationQueryTimeout" value="2000" />
    <!-- 空闲对象驱逐线程运行时的休眠毫秒数 -->
    <property name="dsTimeBetweenEvictionRunsMillis" value="30000" />
    <!-- 空闲的连接最低要待N毫秒后，才会被释放 -->
    <property name="dsMinEvictableIdleTimeMillis" value="3600000" />
    <!-- 数据库连接池配置结束。 -->

    <!-- 上下文名称：<contextName>, 每个logger都关联到logger上下文， 默认上下文名称为“default”。 -->
    <!-- 但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。 -->
    <contextName>${contextName}</contextName>

    <!-- <appender>是<configuration>的子节点，是负责写日志的组件。 -->
    <!-- 有两个必要属性name和class。 -->
    <!-- name指定appender名称， -->
    <!-- class指定appender的实现类。 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 对日志进行格式化。 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}[%t]|%-5p|%C[%L][%M]%n %m%n</pattern>
        </encoder>
    </appender>

    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。 -->
        <file>${logsDir}/${logFileName}.log</file>

        <!-- 当发生滚动时的行为 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <!-- 必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。 -->
            <!-- 还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip -->
            <FileNamePattern>${logsDir}/${logFileName}%i.log.zip</FileNamePattern>
            <!-- 窗口索引最小值 -->
            <minIndex>1</minIndex>
            <!-- 窗口索引最大值 -->
            <maxIndex>2</maxIndex>
        </rollingPolicy>

        <!-- 激活滚动的条件。 -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!-- 活动文件的大小，默认值是10MB -->
            <maxFileSize>10MB</maxFileSize>
        </triggeringPolicy>

        <!-- 对记录事件进行格式化。 -->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}[%t]|%-5p|%C[%L][%M]%n%m%n</pattern>
        </encoder>
    </appender>

    <!-- 将日志写入数据库 -->
    <appender name="db" class="ch.qos.logback.classic.db.DBAppender">
        <connectionSource class="ch.qos.logback.core.db.DataSourceConnectionSource">
            <dataSource class="org.apache.commons.dbcp2.BasicDataSource">
                <driverClassName>${dsDriverClassName}</driverClassName>
                <url>${dsUrl}</url>
                <username>${dsUsername}</username>
                <password>${dsPassword}</password>
                <connectionProperties>${dsConnectionProperties}</connectionProperties>

                <initialSize>${dsInitialSize}</initialSize>
                <maxTotal>${dsMaxTotal}</maxTotal>
                <minIdle>${dsMinIdle}</minIdle>
                <maxIdle>${dsMaxIdle}</maxIdle>
                <maxWaitMillis>${dsMaxWaitMillis}</maxWaitMillis>
                <validationQuery>${dsValidationQuery}</validationQuery>
                <validationQueryTimeout>${dsValidationQueryTimeout}</validationQueryTimeout>
                <timeBetweenEvictionRunsMillis>${dsTimeBetweenEvictionRunsMillis}</timeBetweenEvictionRunsMillis>
                <minEvictableIdleTimeMillis>${dsMinEvictableIdleTimeMillis}</minEvictableIdleTimeMillis>
            </dataSource>
        </connectionSource>
    </appender>

    <!-- 特殊的<logger>元素，是根logger。只有一个level属性，应为已经被命名为"root". -->
    <!-- level:设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。 -->
    <!-- <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。 -->
    <root level="ERROR">
        <appender-ref ref="stdout" />
        <appender-ref ref="file" />
        <appender-ref ref="db" />
    </root>

    <!-- 用来设置某一个 包 或者具体的某一个 类 的日志打印级别、以及指定<appender>, -->
    <!-- name:用来指定受此logger约束的某一个包或者具体的某一个类。 -->
    <!-- level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。 -->
    <!-- 如果未设置此属性，那么当前loger将会继承上级的级别。 -->
    <!-- additivity:是否向上级logger传递打印信息。默认是true。(这个logger的上级就是上面的root) -->
    <!-- <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。 -->
    <logger name="com.flyhaze" level="DEBUG" />
    <logger name="org.springframework" level="ERROR" />
    <logger name="org.hibernate" level="ERROR" />
</configuration>